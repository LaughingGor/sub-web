name: Publish Docker Image
on: 
  push:
    branches: [ master ]

concurrency: 
  group: ${{ github.ref }}-${{ github.workflow }}
  cancel-in-progress: true

jobs:

build:
    name: Build
    runs-on: ubuntu-20.04

    strategy:
      matrix:
        node-version: [12.x]

    steps:
    - uses: actions/checkout@v2

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}

    - name: Get dependencies and build
      run: |
        yarn install
        yarn build
    - name: Upload
      uses: actions/upload-artifact@v1
      with:
        name: dist
        path: /dist/

  amd64_docker:
    name: Build AMD64 Image
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - name: Download dist
        uses: actions/download-artifact@v3
        with:
          name: dist
          path: /dist

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Docker login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Get commit SHA
        id: vars
        run: echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"

      - name: Build and export
        id: build
        if: github.ref == 'refs/heads/master'
        uses: docker/build-push-action@v3
        with:
          platforms: linux/amd64
          context: scripts/
          tags: longzhiyi/sub-web:latest
          build-args: |
            SHA=${{ steps.vars.outputs.sha_short }}
          outputs: type=image,push=true

      - name: Replace tag without `v`
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/github-script@v6
        id: version
        with:
          script: |
            return context.payload.ref.replace(/\/?refs\/tags\/v/, '')
          result-encoding: string

      - name: Build release and export
        id: build_rel
        if: startsWith(github.ref, 'refs/tags/')
        uses: docker/build-push-action@v3
        with:
          platforms: linux/amd64
          context: scripts/
          tags: longzhiyi/sub-web:${{steps.version.outputs.result}}
          outputs: type=image,push=true

      - name: Save digest
        if: github.ref == 'refs/heads/master'
        run: echo ${{ steps.build.outputs.digest }} > /tmp/digest.txt

      - name: Save release digest
        if: startsWith(github.ref, 'refs/tags/')
        run: echo ${{ steps.build_rel.outputs.digest }} > /tmp/digest.txt

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: digest_amd64
          path: /tmp/digest.txt

  x86_docker:
    name: Build x86 Image
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - name: Download dist
        uses: actions/download-artifact@v3
        with:
          name: dist
          path: /dist

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Docker login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Get commit SHA
        id: vars
        run: echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"

      - name: Build and export
        id: build
        if: github.ref == 'refs/heads/master'
        uses: docker/build-push-action@v3
        with:
          platforms: linux/386
          context: scripts/
          tags: longzhiyi/sub-web:latest
          build-args: |
            SHA=${{ steps.vars.outputs.sha_short }}
          outputs: type=image,push=true

      - name: Replace tag without `v`
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/github-script@v6
        id: version
        with:
          script: |
            return context.payload.ref.replace(/\/?refs\/tags\/v/, '')
          result-encoding: string

      - name: Build release and export
        id: build_rel
        if: startsWith(github.ref, 'refs/tags/')
        uses: docker/build-push-action@v3
        with:
          platforms: linux/386
          context: scripts/
          tags: longzhiyi/subconverter:${{steps.version.outputs.result}}
          outputs: type=image,push=true

      - name: Save digest
        if: github.ref == 'refs/heads/master'
        run: echo ${{ steps.build.outputs.digest }} > /tmp/digest.txt

      - name: Save release digest
        if: startsWith(github.ref, 'refs/tags/')
        run: echo ${{ steps.build_rel.outputs.digest }} > /tmp/digest.txt

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: digest_386
          path: /tmp/digest.txt

  # armv7_build:
  #   name: Build ARMv7 Image
  #   runs-on: [self-hosted, linux, ARM64]
  #   steps:
  #     - name: Checkout base
  #       uses: actions/checkout@v3
  #       with:
  #         fetch-depth: 0

  #     - name: Set up QEMU
  #       uses: docker/setup-qemu-action@v2

  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v2

  #     - name: Docker login
  #       uses: docker/login-action@v2
  #       with:
  #         username: ${{ secrets.DOCKER_USERNAME }}
  #         password: ${{ secrets.DOCKER_PASSWORD }}

  #     - name: Get commit SHA
  #       id: vars
  #       run: echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"

  #     - name: Build and export
  #       id: build
  #       if: github.ref == 'refs/heads/master'
  #       uses: docker/build-push-action@v3
  #       with:
  #         platforms: linux/arm/v7
  #         context: scripts/
  #         tags: longzhiyi/subconverter:latest
  #         build-args: |
  #           SHA=${{ steps.vars.outputs.sha_short }}
  #           THREADS=2
  #         outputs: type=image,push=true

  #     - name: Replace tag without `v`
  #       if: startsWith(github.ref, 'refs/tags/')
  #       uses: actions/github-script@v6
  #       id: version
  #       with:
  #         script: |
  #           return context.payload.ref.replace(/\/?refs\/tags\/v/, '')
  #         result-encoding: string

  #     - name: Build release and export
  #       id: build_rel
  #       if: startsWith(github.ref, 'refs/tags/')
  #       uses: docker/build-push-action@v3
  #       with:
  #         platforms: linux/arm/v7
  #         context: scripts/
  #         tags: longzhiyi/subconverter:${{steps.version.outputs.result}}
  #         build-args: |
  #           THREADS=2
  #         outputs: type=image,push=true

  #     - name: Save digest
  #       if: github.ref == 'refs/heads/master'
  #       run: echo ${{ steps.build.outputs.digest }} > /tmp/digest.txt

  #     - name: Save release digest
  #       if: startsWith(github.ref, 'refs/tags/')
  #       run: echo ${{ steps.build_rel.outputs.digest }} > /tmp/digest.txt

  #     - name: Upload artifact
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: digest_armv7
  #         path: /tmp/digest.txt

  # arm64_build:
  #   name: Build ARM64 Image
  #   runs-on: [self-hosted, linux, ARM64]
  #   steps:
  #     - name: Checkout base
  #       uses: actions/checkout@v3
  #       with:
  #         fetch-depth: 0

  #     - name: Set up QEMU
  #       uses: docker/setup-qemu-action@v2

  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v2

  #     - name: Docker login
  #       uses: docker/login-action@v2
  #       with:
  #         username: ${{ secrets.DOCKER_USERNAME }}
  #         password: ${{ secrets.DOCKER_PASSWORD }}

  #     - name: Get commit SHA
  #       id: vars
  #       run: echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"

  #     - name: Build and export
  #       id: build
  #       if: github.ref == 'refs/heads/master'
  #       uses: docker/build-push-action@v3
  #       with:
  #         platforms: linux/arm64
  #         context: scripts/
  #         tags: longzhiyi/subconverter:latest
  #         build-args: |
  #           SHA=${{ steps.vars.outputs.sha_short }}
  #           THREADS=2
  #         outputs: type=image,push=true

  #     - name: Replace tag without `v`
  #       if: startsWith(github.ref, 'refs/tags/')
  #       uses: actions/github-script@v6
  #       id: version
  #       with:
  #         script: |
  #           return context.payload.ref.replace(/\/?refs\/tags\/v/, '')
  #         result-encoding: string

  #     - name: Build release and export
  #       id: build_rel
  #       if: startsWith(github.ref, 'refs/tags/')
  #       uses: docker/build-push-action@v3
  #       with:
  #         platforms: linux/arm64
  #         context: scripts/
  #         tags: longzhiyi/subconverter:${{steps.version.outputs.result}}
  #         build-args: |
  #           THREADS=2
  #         outputs: type=image,push=true

  #     - name: Save digest
  #       if: github.ref == 'refs/heads/master'
  #       run: echo ${{ steps.build.outputs.digest }} > /tmp/digest.txt

  #     - name: Save release digest
  #       if: startsWith(github.ref, 'refs/tags/')
  #       run: echo ${{ steps.build_rel.outputs.digest }} > /tmp/digest.txt

  #     - name: Upload artifact
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: digest_arm64
  #         path: /tmp/digest.txt

  build_docker:
    name: build_docker
    needs: [amd64_docker, x86_docker]
    runs-on: ubuntu-latest
    steps:
      # https://github.com/docker/setup-qemu-action
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      # # https://github.com/docker/setup-buildx-action
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          config-inline: |
            [worker.oci]
              max-parallelism = 1

      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          path: /tmp/images/

#      - name: Load image
#        if: github.ref == 'refs/heads/master'
#        run: |
#          docker load --input /tmp/image_amd64/image_amd64.tar
#          docker load --input /tmp/image_386/image_386.tar
#          docker load --input /tmp/image_armv7/image_armv7.tar
#          docker load --input /tmp/image_arm64/image_arm64.tar
#          docker image ls -a

      - name: Docker login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
#      - name: Get commit SHA
#        id: vars
#        run: echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"

#      - name: Docker buildx image and push on master branch
#        if: github.ref == 'refs/heads/master'
#        uses: docker/build-push-action@v3
#        with:
#          platforms: linux/amd64,linux/arm/v7,linux/arm64,linux/386
#          context: scripts/
#          tags: tindy2013/subconverter:latest
#          build-args: |
#            SHA=${{ steps.vars.outputs.sha_short }}
#            THREADS=1
#          outputs: |
#            type=image,push=true

      - name: Replace tag without `v`
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/github-script@v6
        id: version
        with:
          script: |
            return context.payload.ref.replace(/\/?refs\/tags\/v/, '')
          result-encoding: string

#      - name: Load release image
#        if: startsWith(github.ref, 'refs/tags/')
#        run: |
#          docker load --input /tmp/image_amd64/image_amd64_release.tar
#          docker load --input /tmp/image_386/image_386_release.tar
#          docker load --input /tmp/image_armv7/image_armv7_release.tar
#          docker load --input /tmp/image_arm64/image_arm64_release.tar
#          docker image ls -a

#      - name: Docker buildx image and push on release
#        if: startsWith(github.ref, 'refs/tags/')
#        uses: docker/build-push-action@v3
#        with:
#          platforms: linux/amd64,linux/arm/v7,linux/arm64,linux/386
#          context: scripts/
#          tags: tindy2013/subconverter:${{steps.version.outputs.result}}
#          build-args: THREADS=1
#          outputs: type=image,push=true

      - name: Merge and push manifest on master branch
        if: github.ref == 'refs/heads/master'
        run: python scripts/merge_manifest.py

      - name: Merge and push manifest on release
        if: startsWith(github.ref, 'refs/tags/')
        run: python scripts/merge_manifest.py ${{steps.version.outputs.result}}
